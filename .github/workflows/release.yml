name: Release build
on:
  push:
    branches:
      - main
    tags:
      - 'v*'
permissions:
  contents: write
jobs:
  release:
    name: Release - ${{ matrix.platform.os_name }}
    strategy:
      matrix:
        platform:
          - os_name: Linux-x86_64
            os: ubuntu-24.04
            target: x86_64-unknown-linux-musl
            bin: vpxtool
            name: vpxtool-Linux-x86_64-musl

          - os_name: Linux-aarch64
            os: ubuntu-24.04
            target: aarch64-unknown-linux-musl
            bin: vpxtool
            name: vpxtool-Linux-aarch64-musl

          - os_name: Windows-aarch64
            os: windows-latest
            target: aarch64-pc-windows-msvc
            bin: vpxtool.exe
            name: vpxtool-Windows-aarch64

          - os_name: Windows-x86_64
            os: windows-latest
            target: x86_64-pc-windows-msvc
            bin: vpxtool.exe
            name: vpxtool-Windows-x86_64

          - os_name: macOS-x86_64
            os: macos-latest
            target: x86_64-apple-darwin
            bin: vpxtool
            name: vpxtool-macOS-x86_64

          - os_name: macOS-aarch64
            os: macos-latest
            target: aarch64-apple-darwin
            bin: vpxtool
            name: vpxtool-macOS-aarch64

    runs-on: ${{ matrix.platform.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install minimal stable with clippy and rustfmt
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: rustfmt, clippy
          target: ${{ matrix.platform.target }}
      - name: Build binary (*nix)
        shell: bash
        run: |
          cargo build --locked --release --target ${{ matrix.platform.target }}
        if: ${{ !contains(matrix.platform.os, 'windows') }}
      - name: Build binary (Windows)
        # We have to use the platform's native shell. If we use bash on
        # Windows then OpenSSL complains that the Perl it finds doesn't use
        # the platform's native paths and refuses to build.
        shell: powershell
        run: |
          & cargo build --locked --release --target ${{ matrix.platform.target }}
        if: contains(matrix.platform.os, 'windows')
      - name: Set full archive name as env variable
        shell: bash
        run: |
          VERSION=$(if [[ $GITHUB_REF == refs/tags/* ]]; then echo ${GITHUB_REF#refs/tags/} | sed 's/\//-/g'; else git rev-parse --short $GITHUB_SHA; fi)
          EXTENSION="tar.gz"
          if [[ "${{ matrix.platform.os }}" == "windows-latest" ]]; then
            EXTENSION="zip"
          fi
          echo "ARCHIVE_NAME=${{ matrix.platform.name }}-${VERSION}.$EXTENSION" >> $GITHUB_ENV
      - name: Package as archive
        shell: bash
        run: |
          cd target/${{ matrix.platform.target }}/release
          if [[ "${{ matrix.platform.os }}" == "windows-latest" ]]; then
            7z a ../../../$ARCHIVE_NAME ${{ matrix.platform.bin }}
          else
            tar czvf ../../../$ARCHIVE_NAME ${{ matrix.platform.bin }}
          fi
          cd -
      - name: Publish release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARCHIVE_NAME }}
          path: ${{ env.ARCHIVE_NAME }}
          if-no-files-found: error
        if: startsWith( github.ref, 'refs/tags/v' ) == false
      - name: Publish GitHub release
        uses: softprops/action-gh-release@v2
        with:
          files: "vpxtool*"
        if: startsWith( github.ref, 'refs/tags/v' )
