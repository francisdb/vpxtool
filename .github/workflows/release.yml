name: Release
on: [push]
permissions:
  contents: write
jobs:
  release:
    name: Release - ${{ matrix.platform.os_name }}
    if: startsWith( github.ref, 'refs/tags/v' ) || github.ref == 'refs/tags/test-release'
    strategy:
      matrix:
        platform:
          - os_name: Linux-x86_64
            os: ubuntu-20.04
            target: x86_64-unknown-linux-musl
            bin: vpxtool
            name: vpxtool-Linux-x86_64-musl.tar.gz
            cargo_command: cargo
            
          - os_name: Linux-aarch64
            os: ubuntu-20.04
            target: aarch64-unknown-linux-musl
            bin: vpxtool
            name: vpxtool-Linux-aarch64-musl.tar.gz
            cargo_command: cargo
            
          - os_name: Windows-aarch64
            os: windows-latest
            target: aarch64-pc-windows-msvc
            bin: vpxtool.exe
            name: vpxtool-Windows-aarch64.zip
            cargo_command: cargo

          - os_name: Windows-x86_64
            os: windows-latest
            target: x86_64-pc-windows-msvc
            bin: vpxtool.exe
            name: vpxtool-Windows-x86_64.zip
            cargo_command: cargo  

          - os_name: macOS-x86_64
            os: macOS-latest
            target: x86_64-apple-darwin
            bin: vpxtool
            name: vpxtool-macOS-x86_64.tar.gz
            cargo_command: cargo

          - os_name: macOS-aarch64
            os: macOS-latest
            target: aarch64-apple-darwin
            bin: vpxtool
            name: vpxtool-macOS-aarch64.tar.gz
            cargo_command: cargo

    runs-on: ${{ matrix.platform.os }}
    steps:
        - name: Checkout
          uses: actions/checkout@v4
        - name: Install toolchain
          uses: dtolnay/rust-toolchain@stable
          with:
            targets: ${{ matrix.platform.target }}
        - name: Build binary (*nix)
          shell: bash
          run: |
                      ${{ matrix.platform.cargo_command }} build --locked --release --target ${{ matrix.platform.target }}
          if: ${{ !contains(matrix.platform.os, 'windows') }}
        - name: Build binary (Windows)
          # We have to use the platform's native shell. If we use bash on
          # Windows then OpenSSL complains that the Perl it finds doesn't use
          # the platform's native paths and refuses to build.
          shell: powershell
          run: |
                      & ${{ matrix.platform.cargo_command }} build --locked --release --target ${{ matrix.platform.target }}
          if: contains(matrix.platform.os, 'windows')
        - name: Package as archive
          shell: bash
          run: |
            cd target/${{ matrix.platform.target }}/release
            if [[ "${{ matrix.platform.os }}" == "windows-latest" ]]; then
              7z a ../../../${{ matrix.platform.name }} ${{ matrix.platform.bin }}
            else
              tar czvf ../../../${{ matrix.platform.name }} ${{ matrix.platform.bin }}
            fi
            cd -          
        - name: Publish release artifacts
          uses: actions/upload-artifact@v4
          with:
            name: vpxtool-${{ matrix.platform.os_name }}
            path: "vpxtool*"
          if: github.ref == 'refs/tags/test-release'
        - name: Publish GitHub release
          uses: softprops/action-gh-release@v1
          with:
            draft: true
            files: "vpxtool*"
          if: startsWith( github.ref, 'refs/tags/v' )
